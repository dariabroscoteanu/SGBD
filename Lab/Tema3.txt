
--2. Defini?i un tip colec?ie denumit tip_orase_***. Crea?i tabelul excursie_*** cu urm?toarea structur?:
--cod_excursie NUMBER(4), denumire VARCHAR2(20), orase tip_orase_*** (ce va con?ine lista
--ora?elor care se viziteaz? într-o excursie, într-o ordine stabilit?; de exemplu, primul ora? din list? va fi primul
--ora? vizitat), status (disponibil? sau anulat?).
--a. Insera?i 5 înregistr?ri în tabel.
--b. Actualiza?i coloana orase pentru o excursie specificat?:
--- ad?uga?i un ora? nou în list?, ce va fi ultimul vizitat în excursia respectiv?;
--- ad?uga?i un ora? nou în list?, ce va fi al doilea ora? vizitat în excursia respectiv?;
--- inversa?i ordinea de vizitare a dou? dintre ora?e al c?ror nume este specificat;
--- elimina?i din list? un ora? al c?rui nume este specificat.
--c. Pentru o excursie al c?rui cod este dat, afi?a?i num?rul de ora?e vizitate, respectiv numele ora?elor.
--d. Pentru fiecare excursie afi?a?i lista ora?elor vizitate.
--e. Anula?i excursiile cu cele mai pu?ine ora?e vizitate.
CREATE OR REPLACE TYPE tip_orase_bdm IS TABLE OF VARCHAR2(200);

CREATE TABLE excursie_bdm (
    cod_excursie NUMBER(4) CONSTRAINT PK_EXCURSIE PRIMARY KEY,
    denumire VARCHAR(20),
    orase tip_orase_bdm,
    status VARCHAR(20) CONSTRAINT check_status CHECK(status in ('UNAVAILABLE','AVAILABLE'))
    )  
NESTED TABLE orase STORE AS tabel_orase_bdm;

SELECT *
FROM excursie_bdm;

-- a.
INSERT INTO excursie_bdm
VALUES (1, 'MALTA', tip_orase_bdm('VALLETTA', 'SLIEMA', 'BIRGU', 'MELLIEHA', 'MDINA'), 'AVAILABLE');

INSERT INTO excursie_bdm
VALUES (2, 'SUEDIA', tip_orase_bdm('STOCKHOLM', 'VISBY', 'UPPSALA', 'GOTEBORG', 'LUND'), 'UNAVAILABLE');

INSERT INTO excursie_bdm
VALUES (3, 'GREECE', tip_orase_bdm('ATHENA', 'SALONIC', 'CHANIA', 'RODOS', 'PATRAS'), 'AVAILABLE');

INSERT INTO excursie_bdm
VALUES (4, 'SWITZERLAND', tip_orase_bdm('ZURICH', 'LUCERNA', 'MONTREUX', 'LAUSANNE', 'BASEL'), 'AVAILABLE');

INSERT INTO excursie_bdm
VALUES (5, 'SPAIN', tip_orase_bdm('MADRID', 'BARCELONA', 'SEVILLA', 'RONDA', 'BILBAO'), 'UNAVAILABLE');

COMMIT;
-- b.
-- b.1.ad?uga?i un ora? nou în list?, ce va fi ultimul vizitat în excursia respectiv?;

DECLARE
    id NUMBER(4) := &id;
    oras VARCHAR(200) :='&oras';
BEGIN
    INSERT INTO TABLE( SELECT orase FROM excursie_bdm WHERE cod_excursie = id) VALUES (UPPER(oras));
    DBMS_OUTPUT.PUT_LINE ('Insert succeeded');
END;
/
ROLLBACK;


-- b.2.ad?uga?i un ora? nou în list?, ce va fi al doilea ora? vizitat în excursia respectiv?;

DECLARE 
    tabel tip_orase_bdm := tip_orase_bdm();
    aux   tip_orase_bdm := tip_orase_bdm();
    id        NUMBER(4) := &id;
    oras   VARCHAR(200) :='&oras';
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_bdm
    WHERE cod_excursie = id;
    
    FOR i in 1..tabel.count LOOP
        aux.extend;
        IF i = 1 
            THEN aux(i) := tabel(i);
        END IF;
        IF i = 2
            THEN aux(i) := UPPER(oras);
            aux.extend;
            aux(i+1) := tabel(i);
        END IF;
        IF i > 2
            THEN aux(i+1) := tabel(i);
        END IF;
    END LOOP;
    
    UPDATE excursie_bdm 
    SET orase = aux
    WHERE cod_excursie = id;
END;
/
ROLLBACK;

-- b.3. inversa?i ordinea de vizitare a dou? dintre ora?e al c?ror nume este specificat;

DECLARE 
    tabel tip_orase_bdm := tip_orase_bdm();
    id        NUMBER(4) := &id;
    oras1   VARCHAR(200) :='&oras1';
    oras2   VARCHAR(200) :='&oras2';
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_bdm
    WHERE cod_excursie = id;
    
    FOR i in 1..tabel.count LOOP
        IF tabel(i) = oras1 
            THEN tabel(i) := UPPER(oras2);
        ELSE
            IF tabel(i) = oras2 
                THEN tabel(i) := UPPER(oras1);
            END IF;
        END IF;
    END LOOP;
    
    UPDATE excursie_bdm 
    SET orase = tabel
    WHERE cod_excursie = id;
END;
/
ROLLBACK;

-- b.4. elimina?i din list? un ora? al c?rui nume este specificat.

DECLARE 
    tabel tip_orase_bdm := tip_orase_bdm();
    aux tip_orase_bdm := tip_orase_bdm();
    id        NUMBER(4) := &id;
    oras   VARCHAR(200) :='&oras';
    ind NUMBER(6) := 1;
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_bdm
    WHERE cod_excursie = id;
    
    FOR i in 1..tabel.count LOOP
        IF tabel(i) != oras
            THEN aux.extend;
                 aux(ind) := tabel(i);
                 ind := ind + 1;  
        END IF;
    END LOOP;
    
    UPDATE excursie_bdm 
    SET orase = aux
    WHERE cod_excursie = id;
END;
/
ROLLBACK;

-- c. . Pentru o excursie al c?rui cod este dat, afi?a?i num?rul de ora?e vizitate, respectiv numele ora?elor.

DECLARE 
    tabel tip_orase_bdm := tip_orase_bdm();
    id        NUMBER(4) := &id;
    
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_bdm
    WHERE cod_excursie = id;
    
    DBMS_OUTPUT.PUT_LINE('Nr orase: ' || tabel.count);
    
    FOR i in 1..tabel.count LOOP
         DBMS_OUTPUT.PUT_LINE(tabel(i));
    END LOOP;
   
END;
/


-- d. Pentru fiecare excursie afi?a?i lista ora?elor vizitate.
SET SERVEROUTPUT ON;

DECLARE 
    tabel tip_orase_bdm := tip_orase_bdm();
    TYPE tip_coduri IS VARRAY(5) OF NUMBER(6);
    coduri tip_coduri;
    id NUMBER(6) ;
BEGIN
    SELECT cod_excursie BULK COLLECT
    INTO coduri
    FROM excursie_bdm;


    for i in coduri.FIRST..coduri.LAST LOOP
        id := coduri(i);
        SELECT orase
        INTO tabel
        FROM excursie_bdm
        WHERE cod_excursie = id;
        DBMS_OUTPUT.PUT_LINE('Pentru excursia cu codul ' || id || ':');
         FOR i in 1..tabel.count LOOP
         DBMS_OUTPUT.PUT_LINE(tabel(i));
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('');
    END LOOP;
        
   
END;
/


-- e. Anula?i excursiile cu cele mai pu?ine ora?e vizitate.

DECLARE 
    tabel tip_orase_bdm := tip_orase_bdm();
    TYPE tip_coduri IS VARRAY(5) OF NUMBER(6);
    coduri tip_coduri;
    id NUMBER(6) ;
    minim NUMBER(6);
    numar NUMBER(6);
BEGIN
    SELECT cod_excursie BULK COLLECT
    INTO coduri
    FROM excursie_bdm;

    id := coduri(1);
    SELECT orase
    INTO tabel
    FROM excursie_bdm
    WHERE cod_excursie = id;
    
    minim := tabel.count;
    
    FOR i IN 2..coduri.LAST LOOP
        id := coduri(i);
        SELECT orase
        INTO tabel
        FROM excursie_bdm
        WHERE cod_excursie = id;
        IF tabel.count < minim
            THEN minim := tabel.count;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Minimul este: ' || minim);
        
    FOR i IN coduri.FIRST..coduri.LAST LOOP
        id := coduri(i);
        SELECT orase
        INTO tabel
        FROM excursie_bdm
        WHERE cod_excursie = id;
        IF tabel.count = minim THEN
            UPDATE excursie_bdm 
            SET status = 'UNAVAILABLE'
            WHERE cod_excursie = id;
        END IF;
    END LOOP;
   
END;
/
ROLLBACK;

SELECT *
FROM excursie_bdm;


---------------------------------------------------------------------------------------------------
--3. Ex 2 dar cu VARRAY - schimb cele 3 initiale de la coada in dmb

CREATE OR REPLACE TYPE tip_orase_dmb IS VARRAY(200) OF VARCHAR2(200);

CREATE TABLE excursie_dmb (
    cod_excursie NUMBER(4) CONSTRAINT PK_EXCURSIE_2 PRIMARY KEY,
    denumire VARCHAR(20),
    orase tip_orase_dmb,
    status VARCHAR(20) CONSTRAINT check_status_2 CHECK(status in ('UNAVAILABLE','AVAILABLE'))
    )  ;

SELECT *
FROM excursie_dmb;

-- a.
INSERT INTO excursie_dmb
VALUES (1, 'FRANCE', tip_orase_dmb('PARIS', 'NISA', 'MARSILLA', 'CANNES', 'BORDEAUX'), 'AVAILABLE');

INSERT INTO excursie_dmb
VALUES (2, 'ITALY', tip_orase_dmb('ROMA', 'MILAN', 'NAPLES', 'BOLOGNA', 'PISA'), 'UNAVAILABLE');

INSERT INTO excursie_dmb
VALUES (3, 'NORWAY', tip_orase_dmb('OSLO', 'BERGEN', 'TRONDHEIM', 'STAVANGER', 'FREDERIKSTAD'), 'AVAILABLE');

INSERT INTO excursie_dmb
VALUES (4, 'ENGLAND', tip_orase_dmb('LONDON', 'YORK', 'RYE', 'BIRMINGHAM', 'BURFORD'), 'AVAILABLE');

INSERT INTO excursie_dmb
VALUES (5, 'AUSTRIA', tip_orase_dmb('VIENNA', 'GRAZ', 'LINZ', 'SALZBURG', 'HALLSTATT'), 'UNAVAILABLE');

COMMIT;

-- b.
-- b.1.ad?uga?i un ora? nou în list?, ce va fi ultimul vizitat în excursia respectiv?;

DECLARE
    id NUMBER(4) := &id;
    oras VARCHAR(200) :='&oras';
    tabel tip_orase_dmb := tip_orase_dmb();
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_dmb
    WHERE cod_excursie = id;
    
    tabel.extend;
    tabel(tabel.count) := oras;
    
     UPDATE excursie_dmb
    SET orase = tabel
    WHERE cod_excursie = id;
END;
/
ROLLBACK;


-- b.2.ad?uga?i un ora? nou în list?, ce va fi al doilea ora? vizitat în excursia respectiv?;

DECLARE 
    tabel tip_orase_dmb := tip_orase_dmb();
    aux   tip_orase_dmb := tip_orase_dmb();
    id        NUMBER(4) := &id;
    oras   VARCHAR(200) :='&oras';
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_dmb
    WHERE cod_excursie = id;
    
    FOR i in 1..tabel.count LOOP
        aux.extend;
        IF i = 1 
            THEN aux(i) := tabel(i);
        END IF;
        IF i = 2
            THEN aux(i) := UPPER(oras);
            aux.extend;
            aux(i+1) := tabel(i);
        END IF;
        IF i > 2
            THEN aux(i+1) := tabel(i);
        END IF;
    END LOOP;
    
    UPDATE excursie_dmb 
    SET orase = aux
    WHERE cod_excursie = id;
END;
/
ROLLBACK;

-- b.3. inversa?i ordinea de vizitare a dou? dintre ora?e al c?ror nume este specificat;

DECLARE 
    tabel tip_orase_dmb := tip_orase_dmb();
    id        NUMBER(4) := &id;
    oras1   VARCHAR(200) :='&oras1';
    oras2   VARCHAR(200) :='&oras2';
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_dmb
    WHERE cod_excursie = id;
    
    FOR i in 1..tabel.count LOOP
        IF tabel(i) = oras1 
            THEN tabel(i) := UPPER(oras2);
        ELSE
            IF tabel(i) = oras2 
                THEN tabel(i) := UPPER(oras1);
            END IF;
        END IF;
    END LOOP;
    
    UPDATE excursie_dmb
    SET orase = tabel
    WHERE cod_excursie = id;
END;
/
ROLLBACK;

SELECT *
FROM excursie_dmb;

-- b.4. elimina?i din list? un ora? al c?rui nume este specificat.

DECLARE 
    tabel tip_orase_dmb := tip_orase_dmb();
    aux tip_orase_dmb := tip_orase_dmb();
    id        NUMBER(4) := &id;
    oras   VARCHAR(200) :='&oras';
    ind NUMBER(6) := 1;
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_dmb
    WHERE cod_excursie = id;
    
    FOR i in 1..tabel.count LOOP
        IF tabel(i) != oras
            THEN aux.extend;
                 aux(ind) := tabel(i);
                 ind := ind + 1;  
        END IF;
    END LOOP;
    
    UPDATE excursie_dmb 
    SET orase = aux
    WHERE cod_excursie = id;
END;
/
ROLLBACK;

-- c. . Pentru o excursie al c?rui cod este dat, afi?a?i num?rul de ora?e vizitate, respectiv numele ora?elor.
SET SERVEROUTPUT ON;
DECLARE 
    tabel tip_orase_dmb := tip_orase_dmb();
    id        NUMBER(4) := &id;
    
BEGIN
    SELECT orase
    INTO tabel
    FROM excursie_dmb
    WHERE cod_excursie = id;
    
    DBMS_OUTPUT.PUT_LINE('Nr orase: ' || tabel.count);
    
    FOR i in 1..tabel.count LOOP
         DBMS_OUTPUT.PUT_LINE(tabel(i));
    END LOOP;
   
END;
/


-- d. Pentru fiecare excursie afi?a?i lista ora?elor vizitate.
SET SERVEROUTPUT ON;

DECLARE 
    tabel tip_orase_dmb := tip_orase_dmb();
    TYPE tip_coduri IS VARRAY(5) OF NUMBER(6);
    coduri tip_coduri;
    id NUMBER(6) ;
BEGIN
    SELECT cod_excursie BULK COLLECT
    INTO coduri
    FROM excursie_dmb;


    for i in coduri.FIRST..coduri.LAST LOOP
        id := coduri(i);
        SELECT orase
        INTO tabel
        FROM excursie_dmb
        WHERE cod_excursie = id;
        DBMS_OUTPUT.PUT_LINE('Pentru excursia cu codul ' || id || ':');
         FOR i in 1..tabel.count LOOP
         DBMS_OUTPUT.PUT_LINE(tabel(i));
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('');
    END LOOP;
        
   
END;
/


-- e. Anula?i excursiile cu cele mai pu?ine ora?e vizitate.

DECLARE 
    tabel tip_orase_dmb := tip_orase_dmb();
    TYPE tip_coduri IS VARRAY(5) OF NUMBER(6);
    coduri tip_coduri;
    id NUMBER(6) ;
    minim NUMBER(6);
    numar NUMBER(6);
BEGIN
    SELECT cod_excursie BULK COLLECT
    INTO coduri
    FROM excursie_dmb;

    id := coduri(1);
    SELECT orase
    INTO tabel
    FROM excursie_dmb
    WHERE cod_excursie = id;
    
    minim := tabel.count;
    
    FOR i IN 2..coduri.LAST LOOP
        id := coduri(i);
        SELECT orase
        INTO tabel
        FROM excursie_dmb
        WHERE cod_excursie = id;
        IF tabel.count < minim
            THEN minim := tabel.count;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Minimul este: ' || minim);
        
    FOR i IN coduri.FIRST..coduri.LAST LOOP
        id := coduri(i);
        SELECT orase
        INTO tabel
        FROM excursie_dmb
        WHERE cod_excursie = id;
        IF tabel.count = minim THEN
            UPDATE excursie_dmb 
            SET status = 'UNAVAILABLE'
            WHERE cod_excursie = id;
        END IF;
    END LOOP;
   
END;
/

ROLLBACK;

SELECT * 
FROM excursie_dmb;


